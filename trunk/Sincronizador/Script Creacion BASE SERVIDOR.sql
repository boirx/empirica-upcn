/******************************************************************************/
/***       Generated by IBExpert 2009.10.29 23/01/2012 09:15:23 a.m.        ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES NONE;

CREATE DATABASE 'C:\SISTEMAS\Sincronizador\SIGEFA SERVER.FDB'
USER 'SYSDBA' PASSWORD 'masterkey'
PAGE_SIZE 4096
DEFAULT CHARACTER SET NONE;



/******************************************************************************/
/***                         User Defined Functions                         ***/
/******************************************************************************/

DECLARE EXTERNAL FUNCTION ABS
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_abs' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION ACOS
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_acos' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION ADDDAY
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addDay' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDHOUR
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addHour' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDMILLISECOND
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMilliSecond' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDMINUTE
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMinute' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDMONTH
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addMonth' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDSECOND
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addSecond' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDWEEK
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addWeek' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADDYEAR
    TIMESTAMP,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'addYear' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ADD_USER
    INTEGER,
    CSTRING(255),
    CSTRING(31),
    CSTRING(8),
    CSTRING(31),
    CSTRING(31),
    CSTRING(31),
    CSTRING(31),
    CSTRING(31),
    CSTRING(8)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_add_user' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION ASCII_CHAR
    INTEGER
    RETURNS CSTRING(1) FREE_IT
    ENTRY_POINT 'IB_UDF_ascii_char' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ASCII_VAL
    CHAR(1)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_ascii_val' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION ASIN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_asin' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION ATAN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_atan' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION ATAN2
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_atan2' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION BIN_AND
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_bin_and' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION BIN_OR
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_bin_or' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION BIN_XOR
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'IB_UDF_bin_xor' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION BITAND
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_bitAnd' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION BITNOT
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_bitNot' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION BITOR
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_bitOr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION BITXOR
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_bitXor' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_LINE
    BLOB,
    INTEGER
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_b_line' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_LINE_COUNT
    BLOB
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_b_line_count' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_LONGLINE
    BLOB,
    INTEGER
    RETURNS CSTRING(16383) FREE_IT
    ENTRY_POINT 'fn_b_longline' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_LONGSUBSTR
    BLOB,
    INTEGER,
    INTEGER
    RETURNS CSTRING(16383) FREE_IT
    ENTRY_POINT 'fn_b_longsubstr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_MAX_SEGMENT
    BLOB
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_b_max_segment' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_NUMBER_SEGMENTS
    BLOB
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_b_number_segments' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_PUT_SEGMENT
    CSTRING(16383),
    BLOB
    RETURNS PARAMETER 2
    ENTRY_POINT 'fn_b_put_segment' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_STRCMP
    BLOB,
    BLOB
    RETURNS SMALLINT BY VALUE
    ENTRY_POINT 'fn_b_strcmp' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_STRPOS
    CSTRING(16383),
    BLOB
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_b_strpos' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_SUBSTR
    BLOB,
    INTEGER,
    INTEGER
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_b_substr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_TEXTPOS
    CSTRING(16383),
    BLOB
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_b_textpos' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION B_TOTAL_LENGTH
    BLOB
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_b_total_length' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION C
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_c' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION CALCEXPR
    CSTRING(16383),
    CSTRING(16383)
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_CalcExpr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION CEIL
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_ceil' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION CEILING
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_ceiling' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION CEQUAL
    CSTRING(16383),
    CSTRING(16383)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_cequal' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION CHR
    SMALLINT
    RETURNS CSTRING(1) FREE_IT
    ENTRY_POINT 'fn_chr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION CIF
    INTEGER,
    CSTRING(255),
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_cif' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION CONVERTSYMBOLS
    CSTRING(255),
    CSTRING(255),
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_convertsymbols' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION COS
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_cos' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION COSH
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_cosh' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION COT
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_cot' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION CREATEGUID

    RETURNS CSTRING(38) FREE_IT
    ENTRY_POINT 'fn_CreateGUID' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DATETODOUBLE
    TIMESTAMP
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_datetodouble' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DATETOSTR
    TIMESTAMP,
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_datetostr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DAYPERMONTH
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_daypermonth' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DAYSBETWEEN
    TIMESTAMP,
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_daysbetween' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DELETE_USER
    INTEGER,
    CSTRING(255),
    CSTRING(31),
    CSTRING(31),
    CSTRING(8)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_delete_user' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DIF
    INTEGER,
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_dif' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DIV
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_div' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DNULLIF
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS DOUBLE PRECISION BY DESCRIPTOR
    ENTRY_POINT 'dNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DNVL
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS DOUBLE PRECISION BY DESCRIPTOR
    ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DOUBLETODATE
    DOUBLE PRECISION
    RETURNS TIMESTAMP FREE_IT
    ENTRY_POINT 'fn_doubletodate' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DOUBLETOTIME
    DOUBLE PRECISION
    RETURNS TIMESTAMP FREE_IT
    ENTRY_POINT 'fn_doubletotime' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DOW
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_dow' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DPOWER
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR,
    DOUBLE PRECISION BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'power' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION DTEQUAL
    TIMESTAMP,
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_dtequal' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DTIF
    INTEGER,
    TIMESTAMP,
    TIMESTAMP
    RETURNS TIMESTAMP
    ENTRY_POINT 'fn_dtif' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION DZERO
    DOUBLE PRECISION,
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_dividezero' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION E

    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_e' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EAN13CS
    CSTRING(255)
    RETURNS SMALLINT BY VALUE
    ENTRY_POINT 'fn_ean13cs' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION ENCODEDATE
    INTEGER,
    INTEGER,
    INTEGER
    RETURNS TIMESTAMP FREE_IT
    ENTRY_POINT 'fn_encodedate' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION ENCODEDATETIME
    INTEGER,
    INTEGER,
    INTEGER,
    INTEGER,
    INTEGER,
    INTEGER
    RETURNS TIMESTAMP FREE_IT
    ENTRY_POINT 'fn_encodedatetime' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXP
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_exp' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXPRISVALID
    CSTRING(16383),
    CSTRING(16383)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_ExprIsValid' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTDATE
    TIMESTAMP
    RETURNS TIMESTAMP
    ENTRY_POINT 'fn_extractdate' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTDAY
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_day' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTHOUR
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_hour' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTMILLISECOND
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_millisecond' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTMINUTE
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_minute' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTMONTH
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_month' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTSECOND
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_second' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTTIME
    TIMESTAMP
    RETURNS TIMESTAMP
    ENTRY_POINT 'fn_extracttime' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTWEEKDAY
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_weekday' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTYEAR
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_year' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION EXTRACTYEARDAY
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_yearday' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FCLOSE
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fclose' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FCREATE
    CSTRING(255),
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fcreate' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FIRSTDAYMONTH
    TIMESTAMP
    RETURNS TIMESTAMP
    ENTRY_POINT 'fn_firstdaymonth' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FLOATTOSTR
    DOUBLE PRECISION,
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_floattostr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FLOOR
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_floor' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FOPEN
    CSTRING(255),
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fopen' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FO_APPEND

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fo_append' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FO_CREAT

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fo_creat' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FO_EXCL

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fo_excl' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FO_RDONLY

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fo_rdonly' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FO_RDWR

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fo_rdwr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FO_TRUNC

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fo_trunc' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FO_WRONLY

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fo_wronly' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FREAD
    INTEGER,
    INTEGER
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_fread' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FREMOVE
    CSTRING(255)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fremove' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FSEEK
    INTEGER,
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fseek' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FSEEK_CUR

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fseek_cur' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FSEEK_END

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fseek_end' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FSEEK_SET

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fseek_set' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FSIZE
    CSTRING(255)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fsize' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FS_IEXEC

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fs_iexec' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FS_IREAD

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fs_iread' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FS_IWRITE

    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fs_iwrite' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION FWRITE
    INTEGER,
    CSTRING(16383)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_fwrite' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION GETBIT
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_getBit' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION GETEXACTTIMESTAMP
    TIMESTAMP
    RETURNS PARAMETER 1
    ENTRY_POINT 'getExactTimestamp' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION GETRANDOM
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_getRandom' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION I64NULLIF
    NUMERIC(18,4) BY DESCRIPTOR,
    NUMERIC(18,4) BY DESCRIPTOR
    RETURNS NUMERIC(18,4) BY DESCRIPTOR
    ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64NVL
    NUMERIC(18,0) BY DESCRIPTOR,
    NUMERIC(18,0) BY DESCRIPTOR
    RETURNS NUMERIC(18,0) BY DESCRIPTOR
    ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64ROUND
    NUMERIC(18,4) BY DESCRIPTOR,
    NUMERIC(18,4) BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbround' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION I64TRUNCATE
    NUMERIC(18,0) BY DESCRIPTOR,
    NUMERIC(18,0) BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION IEQUAL
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_iequal' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION IIF
    INTEGER,
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_iif' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION INCDATE
    TIMESTAMP,
    INTEGER,
    INTEGER,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'fn_incdate' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION INCDATETIME
    TIMESTAMP,
    INTEGER,
    INTEGER,
    INTEGER,
    INTEGER,
    INTEGER,
    INTEGER
    RETURNS TIMESTAMP
    ENTRY_POINT 'fn_incdatetime' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION INITRANDOM
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_initRandom' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION INTTOSTR
    INTEGER,
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_inttostr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION INULLIF
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS INTEGER BY DESCRIPTOR
    ENTRY_POINT 'iNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION INVL
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS INTEGER BY DESCRIPTOR
    ENTRY_POINT 'idNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION ISLEAPYEAR
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_isleapyear' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LASTDAYMONTH
    TIMESTAMP
    RETURNS TIMESTAMP
    ENTRY_POINT 'fn_lastdaymonth' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LIBNAME

    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_libname' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LIBVERSION

    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_libversion' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_ln' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LOG
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_log' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LOG10
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_log10' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGC
    CSTRING(16383)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_c' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGCIF
    INTEGER,
    CSTRING(16383),
    CSTRING(16383)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_cif' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGCONVERTSYMBOLS
    CSTRING(16383),
    CSTRING(255),
    CSTRING(255)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_convertsymbols' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGFREAD
    INTEGER,
    INTEGER
    RETURNS CSTRING(16383) FREE_IT
    ENTRY_POINT 'fn_fread' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGLTRIM
    CSTRING(16383)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_ltrim' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGPADLEFT
    CSTRING(16383),
    SMALLINT,
    CSTRING(1)
    RETURNS CSTRING(16383) FREE_IT
    ENTRY_POINT 'fn_longpadleft' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGPADRIGHT
    CSTRING(16383),
    SMALLINT,
    CSTRING(1)
    RETURNS CSTRING(16383) FREE_IT
    ENTRY_POINT 'fn_longpadright' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGREPEATTRIM
    CSTRING(16383),
    CSTRING(16383)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_repeattrim' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGRLATIN
    CSTRING(16383)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_rlatin' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGRLOWER
    CSTRING(16383)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_rlower' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGRTRANSLIT
    CSTRING(16383)
    RETURNS CSTRING(16383) FREE_IT
    ENTRY_POINT 'fn_longrtranslit' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGRTRIM
    CSTRING(16383)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_rtrim' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGRUPPER
    CSTRING(16383)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_rupper' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGSTRREPEAT
    CSTRING(16383),
    INTEGER
    RETURNS CSTRING(16383) FREE_IT
    ENTRY_POINT 'fn_longstrrepeat' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGSTRREPLACE
    CSTRING(16383),
    CSTRING(16383),
    CSTRING(16383)
    RETURNS CSTRING(16383) FREE_IT
    ENTRY_POINT 'fn_longstrreplace' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGSTRSTUFF
    CSTRING(16383),
    INTEGER,
    INTEGER,
    CSTRING(16383)
    RETURNS CSTRING(16383) FREE_IT
    ENTRY_POINT 'fn_longstrstuff' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGSUBSTR
    CSTRING(16383),
    INTEGER,
    INTEGER
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_substr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGTRIM
    CSTRING(16383)
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_trim' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LONGWORDNUM
    CSTRING(16383),
    INTEGER,
    CSTRING(31),
    SMALLINT
    RETURNS CSTRING(16383)
    ENTRY_POINT 'fn_wordnum' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION LOWER
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_lower' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION LPAD
    CSTRING(255),
    INTEGER,
    CSTRING(1)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_lpad' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION LTRIM
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_ltrim' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MAXDATE
    TIMESTAMP,
    TIMESTAMP
    RETURNS TIMESTAMP
    ENTRY_POINT 'fn_maxdate' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MAXNUM
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_maxnum' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MD5FINAL
    CSTRING(176)
    RETURNS CSTRING(32) FREE_IT
    ENTRY_POINT 'fn_md5final' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MD5INIT

    RETURNS CSTRING(176) FREE_IT
    ENTRY_POINT 'fn_md5init' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MD5SUM
    CSTRING(16383)
    RETURNS CSTRING(32) FREE_IT
    ENTRY_POINT 'fn_md5sum' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MD5UPDATE
    CSTRING(176),
    CSTRING(16383),
    INTEGER
    RETURNS CSTRING(176)
    ENTRY_POINT 'fn_md5update' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MINDATE
    TIMESTAMP,
    TIMESTAMP
    RETURNS TIMESTAMP
    ENTRY_POINT 'fn_mindate' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MINNUM
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_minnum' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MOD
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_mod' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MODIFY_USER
    INTEGER,
    CSTRING(255),
    CSTRING(31),
    CSTRING(8),
    CSTRING(31),
    CSTRING(31),
    CSTRING(31),
    CSTRING(31),
    CSTRING(31),
    CSTRING(8)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_modify_user' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION MSGBOX
    CSTRING(16383),
    CSTRING(255),
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_msgbox' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION NUMINWORDS
    INTEGER,
    CSTRING(1)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_numinwords' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION ORD
    CSTRING(1)
    RETURNS SMALLINT BY VALUE
    ENTRY_POINT 'fn_ord' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION PADLEFT
    CSTRING(255),
    SMALLINT,
    CSTRING(1)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_padleft' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION PADRIGHT
    CSTRING(255),
    SMALLINT,
    CSTRING(1)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_padright' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION PI

    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_pi' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION POWER
    DOUBLE PRECISION,
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_power' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION QUARTER
    TIMESTAMP
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_quarter' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION RAND

    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'IB_UDF_rand' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION REPEATTRIM
    CSTRING(255),
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_repeattrim' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION RLATIN
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_rlatin' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION RLOWER
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_rlower' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION ROUND
    DOUBLE PRECISION,
    INTEGER
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_round' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION RPAD
    CSTRING(255),
    INTEGER,
    CSTRING(1)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_rpad' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION RTRANSLIT
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_rtranslit' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION RTRIM
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_rtrim' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION RUPPER
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_rupper' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION SDOW
    TIMESTAMP,
    VARCHAR(5)
    RETURNS PARAMETER 2
    ENTRY_POINT 'SDOW' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION SETBIT
    INTEGER,
    INTEGER,
    INTEGER
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_setBit' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION SIGN
    DOUBLE PRECISION
    RETURNS SMALLINT BY VALUE
    ENTRY_POINT 'fn_sign' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION SIN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_sin' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION SINH
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_sinh' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION SNULLIF
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'sNullIf' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION SNVL
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR,
    VARCHAR(100) BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'sNvl' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION SOFTROUND
    DOUBLE PRECISION,
    INTEGER
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_softround' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION SQRT
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_sqrt' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION SRIGHT
    VARCHAR(100) BY DESCRIPTOR,
    SMALLINT,
    VARCHAR(100) BY DESCRIPTOR
    RETURNS PARAMETER 3
    ENTRY_POINT 'right' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION STRCMP
    CSTRING(16383),
    CSTRING(16383)
    RETURNS SMALLINT BY VALUE
    ENTRY_POINT 'fn_strcmp' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION STRCOUNT
    CSTRING(255),
    CSTRING(16383)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_strcount' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION STRING2BLOB
    VARCHAR(300) BY DESCRIPTOR,
    BLOB
    RETURNS PARAMETER 2
    ENTRY_POINT 'string2blob' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION STRLEN
    CSTRING(16383)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_strlen' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION STRPOS
    CSTRING(16383),
    CSTRING(16383)
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_strpos' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION STRREPEAT
    CSTRING(255),
    INTEGER
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_strrepeat' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION STRREPLACE
    CSTRING(255),
    CSTRING(255),
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_strreplace' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION STRSTUFF
    CSTRING(255),
    INTEGER,
    INTEGER,
    CSTRING(255)
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'fn_strstuff' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION STRTRIM
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_trim' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION SUBSTR
    CSTRING(255),
    INTEGER,
    INTEGER
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_substr' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION SUBSTRLEN
    CSTRING(255),
    SMALLINT,
    SMALLINT
    RETURNS CSTRING(255) FREE_IT
    ENTRY_POINT 'IB_UDF_substrlen' MODULE_NAME 'ib_udf';


DECLARE EXTERNAL FUNCTION TAN
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_tan' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION TANH
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_tanh' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION TIMETODOUBLE
    TIMESTAMP
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_timetodouble' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION TRIM
    CSTRING(255)
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_trim' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION TRUNCATE
    INTEGER BY DESCRIPTOR,
    INTEGER BY DESCRIPTOR
    RETURNS PARAMETER 2
    ENTRY_POINT 'fbtruncate' MODULE_NAME 'fbudf';


DECLARE EXTERNAL FUNCTION WORDCOUNT
    CSTRING(16383),
    CSTRING(31),
    SMALLINT
    RETURNS INTEGER BY VALUE
    ENTRY_POINT 'fn_wordcount' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION WORDNUM
    CSTRING(16383),
    INTEGER,
    CSTRING(31),
    SMALLINT
    RETURNS CSTRING(255)
    ENTRY_POINT 'fn_wordnum' MODULE_NAME 'rfunc';


DECLARE EXTERNAL FUNCTION Z
    DOUBLE PRECISION
    RETURNS DOUBLE PRECISION BY VALUE
    ENTRY_POINT 'fn_z' MODULE_NAME 'rfunc';




/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_Z_SINCRO_CLIENTE_ID;
SET GENERATOR GEN_Z_SINCRO_CLIENTE_ID TO 3;

CREATE GENERATOR GEN_Z_SINCRO_CLI_ARCHIVOS_ID;
SET GENERATOR GEN_Z_SINCRO_CLI_ARCHIVOS_ID TO 26;

CREATE GENERATOR GEN_Z_SINCRO_LOTE_ID;
SET GENERATOR GEN_Z_SINCRO_LOTE_ID TO 6;

CREATE GENERATOR GEN_Z_SINCRO_SERVER_ID;
SET GENERATOR GEN_Z_SINCRO_SERVER_ID TO 2;

CREATE GENERATOR Z_SINC_TABLA_GEN;
SET GENERATOR Z_SINC_TABLA_GEN TO 49;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION ERROR '';



SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE SP_GEN_Z_SINCRO_LOTE_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_GEN_Z_SINCRO_SERVER_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE Z_SINC_GENERAR_ARCHIVO_SERVER
RETURNS (
    ID INTEGER,
    OPERATION VARCHAR(1),
    DATE_TIME TIMESTAMP,
    USER_NAME VARCHAR(67),
    TABLE_NAME VARCHAR(67),
    KEY_FIELD VARCHAR(67),
    KEY_VALUE VARCHAR(255),
    FIELD_NAME VARCHAR(67),
    NEW_VALUE VARCHAR(255),
    OLD_VALUE VARCHAR(255),
    FBLOB_NAME VARCHAR(67),
    FBLOB_OLD_CHAR_VALUE VARCHAR(8000),
    FBLOB_NEW_CHAR_VALUE VARCHAR(8000),
    FBLOB_OLD_BLOB_VALUE BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    FBLOB_NEW_BLOB_VALUE BLOB SUB_TYPE 0 SEGMENT SIZE 80)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE Z_SINC_GENERAR_LOTE
AS
BEGIN
  EXIT;
END^



SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE Z_SINC_CAMPO (
    LOG_TABLES_ID  NUMERIC(18,0) NOT NULL,
    FIELD_NAME     VARCHAR(67) NOT NULL,
    OLD_VALUE      VARCHAR(255),
    NEW_VALUE      VARCHAR(255)
);


CREATE TABLE Z_SINC_CAMPO_BLOB (
    LOG_TABLES_ID   NUMERIC(18,0) NOT NULL,
    FIELD_NAME      VARCHAR(67) NOT NULL,
    OLD_CHAR_VALUE  VARCHAR(8000),
    NEW_CHAR_VALUE  VARCHAR(8000),
    OLD_BLOB_VALUE  BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    NEW_BLOB_VALUE  BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE Z_SINC_CLAVE (
    LOG_TABLES_ID  NUMERIC(18,0) NOT NULL,
    KEY_FIELD      VARCHAR(67) NOT NULL,
    KEY_VALUE      VARCHAR(255)
);


CREATE TABLE Z_SINC_TABLA (
    ID              NUMERIC(18,0) NOT NULL,
    TABLE_NAME      VARCHAR(67) NOT NULL,
    OPERATION       VARCHAR(1) NOT NULL,
    DATE_TIME       TIMESTAMP NOT NULL,
    USER_NAME       VARCHAR(67) NOT NULL,
    ID_SINCRO_LOTE  INTEGER
);


CREATE TABLE Z_SINCRO_CLIENTE (
    ID_SINCRO_CLIENTE  INTEGER NOT NULL,
    NOMBRE_CLIENTE     VARCHAR(50),
    ID_CLIENTE         INTEGER
);


CREATE TABLE Z_SINCRO_CLIENTE_ARCHIVOS (
    ID_SINCRO_CLI_ARCHIVO  INTEGER NOT NULL,
    ID_SINCRO_CLIENTE      INTEGER,
    FECHA_Y_HORA           TIMESTAMP,
    ULTIMO_ARCHIVO         VARCHAR(100)
);


CREATE TABLE Z_SINCRO_LOTE (
    ID_SINCRO_LOTE  INTEGER NOT NULL,
    FECHA_HORA      TIMESTAMP,
    ULTIMO_LOTE     INTEGER
);


CREATE TABLE Z_SINCRO_SERVER (
    ID_SINCRO_SERVER  INTEGER NOT NULL,
    FECHA_Y_HORA      TIMESTAMP,
    ULTIMO_ARCHIVO    VARCHAR(100)
);




/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE Z_SINCRO_CLIENTE ADD CONSTRAINT PK_Z_SINCRO_CLIENTE PRIMARY KEY (ID_SINCRO_CLIENTE);
ALTER TABLE Z_SINCRO_CLIENTE_ARCHIVOS ADD CONSTRAINT PK_Z_SINCRO_CLIENTE_ARCHIVOS PRIMARY KEY (ID_SINCRO_CLI_ARCHIVO);
ALTER TABLE Z_SINCRO_LOTE ADD CONSTRAINT PK_Z_SINCRO_LOTE PRIMARY KEY (ID_SINCRO_LOTE);
ALTER TABLE Z_SINCRO_SERVER ADD CONSTRAINT PK_Z_SINCRO_SERVER PRIMARY KEY (ID_SINCRO_SERVER);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE Z_SINCRO_CLIENTE_ARCHIVOS ADD CONSTRAINT FK_Z_SINCRO_CLIENTE_ARCHIVOS_1 FOREIGN KEY (ID_SINCRO_CLIENTE) REFERENCES Z_SINCRO_CLIENTE (ID_SINCRO_CLIENTE);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: Z_SINCRO_CLIENTE_ARCHIVOS_BI */
CREATE TRIGGER Z_SINCRO_CLIENTE_ARCHIVOS_BI FOR Z_SINCRO_CLIENTE_ARCHIVOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_SINCRO_CLI_ARCHIVO IS NULL) THEN
    NEW.ID_SINCRO_CLI_ARCHIVO = GEN_ID(GEN_Z_SINCRO_CLI_ARCHIVOS_ID,1);
END
^


/* Trigger: Z_SINCRO_CLIENTE_BI */
CREATE TRIGGER Z_SINCRO_CLIENTE_BI FOR Z_SINCRO_CLIENTE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_SINCRO_CLIENTE IS NULL) THEN
    NEW.ID_SINCRO_CLIENTE = GEN_ID(GEN_Z_SINCRO_CLIENTE_ID,1);
END
^


/* Trigger: Z_SINCRO_SERVER_BI */
CREATE TRIGGER Z_SINCRO_SERVER_BI FOR Z_SINCRO_SERVER
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_SINCRO_SERVER IS NULL) THEN
    NEW.ID_SINCRO_SERVER = GEN_ID(GEN_Z_SINCRO_SERVER_ID,1);
END
^


SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE SP_GEN_Z_SINCRO_LOTE_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_Z_SINCRO_LOTE_ID, 1);
  SUSPEND;
END^


ALTER PROCEDURE SP_GEN_Z_SINCRO_SERVER_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_Z_SINCRO_SERVER_ID, 1);
  SUSPEND;
END^


ALTER PROCEDURE Z_SINC_GENERAR_ARCHIVO_SERVER
RETURNS (
    ID INTEGER,
    OPERATION VARCHAR(1),
    DATE_TIME TIMESTAMP,
    USER_NAME VARCHAR(67),
    TABLE_NAME VARCHAR(67),
    KEY_FIELD VARCHAR(67),
    KEY_VALUE VARCHAR(255),
    FIELD_NAME VARCHAR(67),
    NEW_VALUE VARCHAR(255),
    OLD_VALUE VARCHAR(255),
    FBLOB_NAME VARCHAR(67),
    FBLOB_OLD_CHAR_VALUE VARCHAR(8000),
    FBLOB_NEW_CHAR_VALUE VARCHAR(8000),
    FBLOB_OLD_BLOB_VALUE BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    FBLOB_NEW_BLOB_VALUE BLOB SUB_TYPE 0 SEGMENT SIZE 80)
AS
declare variable hay_una_nueva integer;
begin
  for select ta.id, ta.table_name, ta.operation, ta.date_time, ta.user_name, cl.key_field, cl.key_value
  from z_sinc_tabla ta
  left join z_sinc_clave cl on (ta.id = cl.log_tables_id)
  where ta.id_sincro_lote is null
  into :id, :table_name, :operation, :date_time, :user_name, :key_field, :key_value
  do
  begin
       hay_una_nueva = null;

       if (:operation = 'U') then --SI ES UN UPDATE
       begin
           --verifico si hay una entrada mas nueva a la que estoy recorriendo
           select ta.id
           from z_sinc_tabla ta
           left join z_sinc_clave cl on (ta.id = cl.log_tables_id)
           where ta.table_name = :table_name --misma tabla
             and ta.date_time > :date_time   --con fecha mayor a la actual
             and cl.key_field = :key_field   --mismo campo clave
             and cl.key_value = :key_value   --mismo valor de clave
             and ta.id_sincro_lote is null   --que aun no se haya procesado
           into :hay_una_nueva;
       end

       if (hay_una_nueva is null) then --si la entrada que estoy recorriendo es la mas nueva que hay
       begin
            --busco todos lo campo involucrados y los devuelvo
            for select ca.field_name, ca.old_value, ca.new_value
            from z_sinc_campo ca
            where ca.log_tables_id = :id
            into :field_name, :old_value, :new_value
            do
              suspend;

            --busco todos lo campo blob involucrados y los devuelvo
            for select cb.field_name, cb.old_char_value, cb.new_char_value, cb.old_blob_value, cb.new_blob_value
            from z_sinc_campo_blob cb
            where cb.log_tables_id = :id
            into :fblob_name, :fblob_old_char_value, :fblob_new_char_value, :fblob_old_blob_value, :fblob_new_blob_value
            do
              suspend;
       end
  end
end^


ALTER PROCEDURE Z_SINC_GENERAR_LOTE
AS
declare variable id_sincro_lote integer;
declare variable ultimo_lote integer;
begin
  --busco el ultimo lote de sincronizacion para obtener el proximo
  select first 1 ultimo_lote
  from z_sincro_lote z
  order by ultimo_lote desc
  into :ultimo_lote;
  if (ultimo_lote is null) then
     ultimo_lote = 1;
  else
     ultimo_lote = ultimo_lote + 1;

  execute procedure sp_gen_z_sincro_lote_id returning_values :id_sincro_lote;

  --guardo el lote que voy a agregar
  insert into z_sincro_lote (id_sincro_lote, fecha_hora, ultimo_lote)
  values (:id_sincro_lote, current_timestamp, :ultimo_lote);

  update z_sinc_tabla z
     set z.id_sincro_lote = :id_sincro_lote
   where z.id_sincro_lote is null;
end^



SET TERM ; ^


/******************************************************************************/
/***                                 Roles                                  ***/
/******************************************************************************/

CREATE ROLE BASE;
