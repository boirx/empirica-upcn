/******************************************************************************/
/***       Generated by IBExpert 2009.10.29 23/01/2012 09:15:23 a.m.        ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES NONE;


/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_Z_SINCRO_CLIENTE_ID;
SET GENERATOR GEN_Z_SINCRO_CLIENTE_ID TO 3;

CREATE GENERATOR GEN_Z_SINCRO_CLI_ARCHIVOS_ID;
SET GENERATOR GEN_Z_SINCRO_CLI_ARCHIVOS_ID TO 26;

CREATE GENERATOR GEN_Z_SINCRO_LOTE_ID;
SET GENERATOR GEN_Z_SINCRO_LOTE_ID TO 6;

CREATE GENERATOR GEN_Z_SINCRO_SERVER_ID;
SET GENERATOR GEN_Z_SINCRO_SERVER_ID TO 2;

CREATE GENERATOR Z_SINC_TABLA_GEN;
SET GENERATOR Z_SINC_TABLA_GEN TO 49;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/





SET TERM ^ ; 



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/

CREATE PROCEDURE SP_GEN_Z_SINCRO_LOTE_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE SP_GEN_Z_SINCRO_SERVER_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE Z_SINC_GENERAR_ARCHIVO_SERVER
RETURNS (
    ID INTEGER,
    OPERATION VARCHAR(1),
    DATE_TIME TIMESTAMP,
    USER_NAME VARCHAR(67),
    TABLE_NAME VARCHAR(67),
    KEY_FIELD VARCHAR(67),
    KEY_VALUE VARCHAR(255),
    FIELD_NAME VARCHAR(67),
    NEW_VALUE VARCHAR(255),
    OLD_VALUE VARCHAR(255),
    FBLOB_NAME VARCHAR(67),
    FBLOB_OLD_CHAR_VALUE VARCHAR(8000),
    FBLOB_NEW_CHAR_VALUE VARCHAR(8000),
    FBLOB_OLD_BLOB_VALUE BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    FBLOB_NEW_BLOB_VALUE BLOB SUB_TYPE 0 SEGMENT SIZE 80)
AS
BEGIN
  SUSPEND;
END^


CREATE PROCEDURE Z_SINC_GENERAR_LOTE
AS
BEGIN
  EXIT;
END^



SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE Z_SINC_CAMPO (
    LOG_TABLES_ID  NUMERIC(18,0) NOT NULL,
    FIELD_NAME     VARCHAR(67) NOT NULL,
    OLD_VALUE      VARCHAR(255),
    NEW_VALUE      VARCHAR(255)
);


CREATE TABLE Z_SINC_CAMPO_BLOB (
    LOG_TABLES_ID   NUMERIC(18,0) NOT NULL,
    FIELD_NAME      VARCHAR(67) NOT NULL,
    OLD_CHAR_VALUE  VARCHAR(8000),
    NEW_CHAR_VALUE  VARCHAR(8000),
    OLD_BLOB_VALUE  BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    NEW_BLOB_VALUE  BLOB SUB_TYPE 0 SEGMENT SIZE 80
);


CREATE TABLE Z_SINC_CLAVE (
    LOG_TABLES_ID  NUMERIC(18,0) NOT NULL,
    KEY_FIELD      VARCHAR(67) NOT NULL,
    KEY_VALUE      VARCHAR(255)
);


CREATE TABLE Z_SINC_TABLA (
    ID              NUMERIC(18,0) NOT NULL,
    TABLE_NAME      VARCHAR(67) NOT NULL,
    OPERATION       VARCHAR(1) NOT NULL,
    DATE_TIME       TIMESTAMP NOT NULL,
    USER_NAME       VARCHAR(67) NOT NULL,
    ID_SINCRO_LOTE  INTEGER
);


CREATE TABLE Z_SINCRO_CLIENTE (
    ID_SINCRO_CLIENTE  INTEGER NOT NULL,
    NOMBRE_CLIENTE     VARCHAR(50),
    ID_CLIENTE         INTEGER
);


CREATE TABLE Z_SINCRO_CLIENTE_ARCHIVOS (
    ID_SINCRO_CLI_ARCHIVO  INTEGER NOT NULL,
    ID_SINCRO_CLIENTE      INTEGER,
    FECHA_Y_HORA           TIMESTAMP,
    ULTIMO_ARCHIVO         VARCHAR(100)
);


CREATE TABLE Z_SINCRO_LOTE (
    ID_SINCRO_LOTE  INTEGER NOT NULL,
    FECHA_HORA      TIMESTAMP,
    ULTIMO_LOTE     INTEGER
);


CREATE TABLE Z_SINCRO_SERVER (
    ID_SINCRO_SERVER  INTEGER NOT NULL,
    FECHA_Y_HORA      TIMESTAMP,
    ULTIMO_ARCHIVO    VARCHAR(100)
);




/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE Z_SINCRO_CLIENTE ADD CONSTRAINT PK_Z_SINCRO_CLIENTE PRIMARY KEY (ID_SINCRO_CLIENTE);
ALTER TABLE Z_SINCRO_CLIENTE_ARCHIVOS ADD CONSTRAINT PK_Z_SINCRO_CLIENTE_ARCHIVOS PRIMARY KEY (ID_SINCRO_CLI_ARCHIVO);
ALTER TABLE Z_SINCRO_LOTE ADD CONSTRAINT PK_Z_SINCRO_LOTE PRIMARY KEY (ID_SINCRO_LOTE);
ALTER TABLE Z_SINCRO_SERVER ADD CONSTRAINT PK_Z_SINCRO_SERVER PRIMARY KEY (ID_SINCRO_SERVER);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE Z_SINCRO_CLIENTE_ARCHIVOS ADD CONSTRAINT FK_Z_SINCRO_CLIENTE_ARCHIVOS_1 FOREIGN KEY (ID_SINCRO_CLIENTE) REFERENCES Z_SINCRO_CLIENTE (ID_SINCRO_CLIENTE);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: Z_SINCRO_CLIENTE_ARCHIVOS_BI */
CREATE TRIGGER Z_SINCRO_CLIENTE_ARCHIVOS_BI FOR Z_SINCRO_CLIENTE_ARCHIVOS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_SINCRO_CLI_ARCHIVO IS NULL) THEN
    NEW.ID_SINCRO_CLI_ARCHIVO = GEN_ID(GEN_Z_SINCRO_CLI_ARCHIVOS_ID,1);
END
^


/* Trigger: Z_SINCRO_CLIENTE_BI */
CREATE TRIGGER Z_SINCRO_CLIENTE_BI FOR Z_SINCRO_CLIENTE
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_SINCRO_CLIENTE IS NULL) THEN
    NEW.ID_SINCRO_CLIENTE = GEN_ID(GEN_Z_SINCRO_CLIENTE_ID,1);
END
^


/* Trigger: Z_SINCRO_SERVER_BI */
CREATE TRIGGER Z_SINCRO_SERVER_BI FOR Z_SINCRO_SERVER
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
  IF (NEW.ID_SINCRO_SERVER IS NULL) THEN
    NEW.ID_SINCRO_SERVER = GEN_ID(GEN_Z_SINCRO_SERVER_ID,1);
END
^


SET TERM ; ^



/******************************************************************************/
/***                           Stored Procedures                            ***/
/******************************************************************************/


SET TERM ^ ;

ALTER PROCEDURE SP_GEN_Z_SINCRO_LOTE_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_Z_SINCRO_LOTE_ID, 1);
  SUSPEND;
END^


ALTER PROCEDURE SP_GEN_Z_SINCRO_SERVER_ID
RETURNS (
    ID INTEGER)
AS
BEGIN
  ID = GEN_ID(GEN_Z_SINCRO_SERVER_ID, 1);
  SUSPEND;
END^


ALTER PROCEDURE Z_SINC_GENERAR_ARCHIVO_SERVER
RETURNS (
    ID INTEGER,
    OPERATION VARCHAR(1),
    DATE_TIME TIMESTAMP,
    USER_NAME VARCHAR(67),
    TABLE_NAME VARCHAR(67),
    KEY_FIELD VARCHAR(67),
    KEY_VALUE VARCHAR(255),
    FIELD_NAME VARCHAR(67),
    NEW_VALUE VARCHAR(255),
    OLD_VALUE VARCHAR(255),
    FBLOB_NAME VARCHAR(67),
    FBLOB_OLD_CHAR_VALUE VARCHAR(8000),
    FBLOB_NEW_CHAR_VALUE VARCHAR(8000),
    FBLOB_OLD_BLOB_VALUE BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    FBLOB_NEW_BLOB_VALUE BLOB SUB_TYPE 0 SEGMENT SIZE 80)
AS
declare variable hay_una_nueva integer;
begin
  for select ta.id, ta.table_name, ta.operation, ta.date_time, ta.user_name, cl.key_field, cl.key_value
  from z_sinc_tabla ta
  left join z_sinc_clave cl on (ta.id = cl.log_tables_id)
  where ta.id_sincro_lote is null
  into :id, :table_name, :operation, :date_time, :user_name, :key_field, :key_value
  do
  begin
       hay_una_nueva = null;

       if (:operation = 'U') then --SI ES UN UPDATE
       begin
           --verifico si hay una entrada mas nueva a la que estoy recorriendo
           select ta.id
           from z_sinc_tabla ta
           left join z_sinc_clave cl on (ta.id = cl.log_tables_id)
           where ta.table_name = :table_name --misma tabla
             and ta.date_time > :date_time   --con fecha mayor a la actual
             and cl.key_field = :key_field   --mismo campo clave
             and cl.key_value = :key_value   --mismo valor de clave
             and ta.id_sincro_lote is null   --que aun no se haya procesado
           into :hay_una_nueva;
       end

       if (hay_una_nueva is null) then --si la entrada que estoy recorriendo es la mas nueva que hay
       begin
            --busco todos lo campo involucrados y los devuelvo
            for select ca.field_name, ca.old_value, ca.new_value
            from z_sinc_campo ca
            where ca.log_tables_id = :id
            into :field_name, :old_value, :new_value
            do
              suspend;

            --busco todos lo campo blob involucrados y los devuelvo
            for select cb.field_name, cb.old_char_value, cb.new_char_value, cb.old_blob_value, cb.new_blob_value
            from z_sinc_campo_blob cb
            where cb.log_tables_id = :id
            into :fblob_name, :fblob_old_char_value, :fblob_new_char_value, :fblob_old_blob_value, :fblob_new_blob_value
            do
              suspend;
       end
  end
end^


ALTER PROCEDURE Z_SINC_GENERAR_LOTE
AS
declare variable id_sincro_lote integer;
declare variable ultimo_lote integer;
begin
  --busco el ultimo lote de sincronizacion para obtener el proximo
  select first 1 ultimo_lote
  from z_sincro_lote z
  order by ultimo_lote desc
  into :ultimo_lote;
  if (ultimo_lote is null) then
     ultimo_lote = 1;
  else
     ultimo_lote = ultimo_lote + 1;

  execute procedure sp_gen_z_sincro_lote_id returning_values :id_sincro_lote;

  --guardo el lote que voy a agregar
  insert into z_sincro_lote (id_sincro_lote, fecha_hora, ultimo_lote)
  values (:id_sincro_lote, current_timestamp, :ultimo_lote);

  update z_sinc_tabla z
     set z.id_sincro_lote = :id_sincro_lote
   where z.id_sincro_lote is null;
end^



SET TERM ; ^


/******************************************************************************/
/***                                 Roles                                  ***/
/******************************************************************************/

;
